/**
 * Hook para Estat√≠sticas Gerais do Dashboard
 * 
 * Busca e gerencia estat√≠sticas principais do blog/portf√≥lio,
 * incluindo m√©tricas de posts, engajamento e compara√ß√µes temporais.
 * 
 * M√©tricas Fornecidas:
 * - üìù Total de posts publicados
 * - üëÅÔ∏è Total de visualiza√ß√µes
 * - ‚ù§Ô∏è Total de curtidas
 * - üí¨ Total de coment√°rios
 * - üìä Varia√ß√µes percentuais (comparado ao per√≠odo anterior)
 * 
 * Funcionalidades:
 * - Carregamento autom√°tico na montagem do componente
 * - Estados de loading e erro gerenciados
 * - Fun√ß√£o de refresh para atualiza√ß√£o manual
 * - Dados de varia√ß√£o para indicadores de tend√™ncia
 * 
 * Uso principal:
 * - Cards de estat√≠sticas no dashboard
 * - M√©tricas de overview
 * - Indicadores de desempenho
 * 
 * @fileoverview Hook para estat√≠sticas principais do dashboard
 * @author Rainer Teixeira
 * @version 1.0.0
 */

"use client"

import { useState, useEffect } from "react"

/**
 * Interface das estat√≠sticas do dashboard
 * 
 * @interface DashboardStats
 * @property {number} totalPosts - Total de posts publicados
 * @property {number} totalViews - Total de visualiza√ß√µes de todos os posts
 * @property {number} totalLikes - Total de curtidas recebidas
 * @property {number} totalComments - Total de coment√°rios recebidos
 * @property {number} [postsChange] - Varia√ß√£o % de posts (comparado ao per√≠odo anterior)
 * @property {number} [viewsChange] - Varia√ß√£o % de views (comparado ao per√≠odo anterior)
 * @property {number} [likesChange] - Varia√ß√£o % de likes (comparado ao per√≠odo anterior)
 * @property {number} [commentsChange] - Varia√ß√£o % de coment√°rios (comparado ao per√≠odo anterior)
 */
interface DashboardStats {
  totalPosts: number
  totalViews: number
  totalLikes: number
  totalComments: number
  postsChange?: number
  viewsChange?: number
  likesChange?: number
  commentsChange?: number
}

/**
 * Hook useDashboardStats
 * 
 * Carrega e gerencia as estat√≠sticas principais do dashboard.
 * Faz requisi√ß√£o √† API `/api/dashboard/stats` e fornece os dados
 * formatados com estados de loading e erro.
 * 
 * Comportamento:
 * - Carrega automaticamente ao montar o componente
 * - Retorna null para stats durante o loading
 * - Fornece mensagem de erro se a requisi√ß√£o falhar
 * - Permite refresh manual dos dados
 * 
 * @returns {Object} Objeto com estat√≠sticas e controles
 * @returns {DashboardStats | null} stats - Dados das estat√≠sticas (null durante loading)
 * @returns {boolean} isLoading - Indica se est√° carregando os dados
 * @returns {string | null} error - Mensagem de erro (null se n√£o houver erro)
 * @returns {Function} refreshStats - Fun√ß√£o para recarregar as estat√≠sticas
 * 
 * @example
 * // Uso b√°sico em cards de estat√≠sticas
 * import { useDashboardStats } from '@/components/dashboard/hooks'
 * 
 * function StatsCards() {
 *   const { stats, isLoading, error } = useDashboardStats()
 *   
 *   if (isLoading) return <LoadingSkeleton />
 *   if (error) return <ErrorMessage message={error} />
 *   if (!stats) return null
 *   
 *   return (
 *     <div className="grid grid-cols-4 gap-4">
 *       <StatCard 
 *         title="Posts" 
 *         value={stats.totalPosts} 
 *         change={stats.postsChange}
 *       />
 *       <StatCard 
 *         title="Views" 
 *         value={stats.totalViews} 
 *         change={stats.viewsChange}
 *       />
 *       <StatCard 
 *         title="Likes" 
 *         value={stats.totalLikes} 
 *         change={stats.likesChange}
 *       />
 *       <StatCard 
 *         title="Coment√°rios" 
 *         value={stats.totalComments}
 *         change={stats.commentsChange}
 *       />
 *     </div>
 *   )
 * }
 * 
 * @example
 * // Uso com refresh manual
 * function DashboardOverview() {
 *   const { stats, refreshStats, isLoading } = useDashboardStats()
 *   
 *   return (
 *     <div>
 *       <button onClick={refreshStats} disabled={isLoading}>
 *         {isLoading ? 'Carregando...' : 'Atualizar Stats'}
 *       </button>
 *       {stats && (
 *         <div>
 *           <p>Total de Posts: {stats.totalPosts}</p>
 *           <p>Total de Views: {stats.totalViews.toLocaleString()}</p>
 *         </div>
 *       )}
 *     </div>
 *   )
 * }
 * 
 * @example
 * // Uso com indicadores de tend√™ncia
 * function TrendIndicator() {
 *   const { stats } = useDashboardStats()
 *   
 *   const getTrendIcon = (change?: number) => {
 *     if (!change) return '‚Üí'
 *     return change > 0 ? '‚Üë' : '‚Üì'
 *   }
 *   
 *   return (
 *     <div>
 *       <p>
 *         Views: {stats?.totalViews} 
 *         <span className={stats?.viewsChange && stats.viewsChange > 0 ? 'text-green-500' : 'text-red-500'}>
 *           {getTrendIcon(stats?.viewsChange)} {stats?.viewsChange}%
 *         </span>
 *       </p>
 *     </div>
 *   )
 * }
 * 
 * @see {@link /api/dashboard/stats} - Endpoint da API
 */
export function useDashboardStats() {
  const [stats, setStats] = useState<DashboardStats | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    loadStats()
  }, [])

  async function loadStats() {
    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch("/api/dashboard/stats")
      
      if (!response.ok) {
        throw new Error("Erro ao carregar estat√≠sticas")
      }

      const data = await response.json()
      setStats(data)
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Erro ao carregar estat√≠sticas"
      setError(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }

  function refreshStats() {
    loadStats()
  }

  return {
    stats,
    isLoading,
    error,
    refreshStats,
  }
}

